#!/bin/bash
### jssl v2.2
jssl_version="v2.2"
JVM_VERSION=$(java -version 2>&1 | head -n 1)


STATE_FILE="$HOME/.state"

# Ha nincs állapot, alapértelmezett érték
if [ ! -f "$STATE_FILE" ]; then
  echo "FAIL" > "$STATE_FILE"
fi

# Állapot beolvasása
STATE=$(cat "$STATE_FILE")
if [[ "$STATE" == "DOCTOR" ]]; then
  while IFS= read -r line; do
    echo "$line"
  done
  exit 0
fi



###############################
### Part: UX ###
###############################
set_colors() {
  if command -v tput &>/dev/null && [ -t 1 ]; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    BLUE=$(tput setaf 4)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
  else
    RED=""; GREEN=""; BLUE=""; BOLD=""; RESET=""
  fi
}
set_colors

###############################
### Part: argbash generated ###
###############################
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "${RED}✖ $1${RESET}" >&2
	exit "${_ret}"
}

begins_with_short_option()
{
	local first_option all_short_options='icph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

debug()
{
  if [ "$_verbose" = "true" ]; then
    echo "$@" >&2
  fi
}

#################################
# Part: DEFAULTS INITIALIZATION #
#################################

_positionals=()
_arg_port="443"
_arg_alias="<host>"
_arg_operation="ping"
_verbose=""

#############################
# Part: options without arg #
#############################

print_help()
{
  printf '%s\n' "${BOLD}jssl $jssl_version${RESET}"
	printf '%s\n\n' "Install trusted certificate and check SSL handshake against java keystore."
	# shellcheck disable=SC2059
  printf "Usage: ${BOLD}jssl <operation> [host|file] ${RESET} ...\n"
	printf '\t%s\n' "<operation>: ping, install, file, list, uninstall, doctor"
	printf '\t%s\n' "[host|file]: host without https:// and port, eg. example.com or a file containing hosts"
	printf '\t%s\n' "-p, --port: port (default: '443')"
	printf '\t%s\n' "-a, --alias: alias in keystore (default: 'jssl_[host]')"
	  printf '\t%s\n\n' "-v, --verbose: Prints version"
  printf '\t%s\n\n' "--version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"


	printf '%s\n' "${BOLD}Examples:${RESET}"
	printf '%s\n' "jssl install example.com"
	printf '%s\n' "jssl ping example.com"
	printf '%s\n\n' "jssl file hosts.txt"
  printf '%s\n\n' "mvn pacakge | jssl doctor"

	check_java_home
}

print_version()
{
	echo "jssl $jssl_version"
	echo "$JVM_VERSION"
	echo "JAVA_HOME $JAVA_HOME"
}

#############################
# Part: argbash parsing     #
#############################
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'."
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			-p*)
				_arg_port="${_key##-p}"
				;;
			-a|--alias)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'."
				_arg_alias="$2"
				shift
				;;
			--alias=*)
				_arg_alias="${_key##--alias=}"
				;;
			-a*)
				_arg_alias="${_key##-a}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			--version)
				print_version
				exit 0
				;;
      -v|--verbose)
        _verbose="true"
        ;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}

assign_positional_args()
{
    shift "$1"
    _arg_operation="$1"

    if [ "$_arg_operation" = "doctor" ]; then
        _arg_host=""
        return
    elif [ "$_arg_operation" = "list" ]; then
        test "${_positionals_count}" -ge 1 || _PRINT_HELP=no die "Missing required argument: 'operation'"
        test "${_positionals_count}" -le 1 || _PRINT_HELP=no die "Too many arguments provided for 'list' operation"
        _arg_host=""
    else
        test "${_positionals_count}" -ge 2 || _PRINT_HELP=no die "Missing required arguments: 'operation' and 'host'"
        test "${_positionals_count}" -le 2 || _PRINT_HELP=no die "Too many arguments provided"
        shift
        _arg_host="$1"
    fi
}

print_and_compile_java()
{
	cat > SSLPing.java <<- EOM
import javax.net.ssl.SSLParameters;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class SSLPing {
	public static void main(String[] args) {
		if (args.length != 2) {
			System.exit(1);
		}
		try {
			SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
			SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(args[0], Integer.parseInt(args[1]));

			SSLParameters sslparams = new SSLParameters();
			sslparams.setEndpointIdentificationAlgorithm("HTTPS");
			sslsocket.setSSLParameters(sslparams);

			InputStream in = sslsocket.getInputStream();
			OutputStream out = sslsocket.getOutputStream();

			out.write(1);

			while (in.available() > 0) {
				System.out.print(in.read());
			}
		} catch (Exception exception) {
			System.err.println(exception);
			System.exit(1);
		}
	}
}
EOM
	"$JAVA_HOME/bin/javac" SSLPing.java
}

clean_up_sslping()
{
	rm -f SSLPing.java SSLPing.class
}

################
# Part: ping   #
################
check_handshake()
{
  debug "${BLUE}Checking SSL handshake...${RESET}"
  "$JAVA_HOME/bin/javac" -version | debug
  print_and_compile_java
  "$JAVA_HOME/bin/java" SSLPing "$_arg_host" "$_arg_port"
  # shellcheck disable=SC2181
  if [[ $? -eq 0 ]]; then
    echo "${GREEN}✔ SSL handshake successful with $_arg_host:${_arg_port}${RESET}"
  else
    echo "${RED}✖ SSL handshake failed with $_arg_host:${_arg_port}${RESET}"
  fi
  clean_up_sslping
}

#################
# Part: doctor  #
#################
run_doctor() {
  echo "${BLUE}➤ Running jssl doctor...${RESET}" >&2

  pkix_hosts=()
  capture_next_line=false

  while IFS= read -r line; do
    debug "$line"

    if [[ "$line" == *"PKIX path building failed"* ]]; then
      capture_next_line=true
    fi

    if $capture_next_line; then
      if [[ "$line" =~ https?://([^/:]+) ]]; then
        host="${BASH_REMATCH[1]}"
        pkix_hosts+=("$host")
      fi
      capture_next_line=false
    fi
  done

  # shellcheck disable=SC2207
  unique_hosts=($(printf "%s\n" "${pkix_hosts[@]}" | sort -u))

  if [ "${#unique_hosts[@]}" -eq 0 ]; then
    echo "${GREEN}✔ No PKIX issues found.${RESET}" >&2
    return
  fi

  for host in "${unique_hosts[@]}"; do
    echo "${BLUE}➤ Found PKIX error with host: $host${RESET}" >&2
    echo "${BLUE}→ Installing cert: jssl install $host${RESET}" >&2
    jssl install "$host"
    echo "${BLUE}→ Verifying connection: jssl ping $host${RESET}" >&2
    jssl ping "$host"
    echo >&2
  done
}

################
# Part: list   #
################
list_installed_certs()
{
  debug "${BLUE}Listing installed jssl certificates in keystore...${RESET}"
  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -v --list \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -storepass changeit \
      | grep -E "Alias name.*jssl" -A 3
  else
    "$JAVA_HOME/bin/keytool" -v --list \
      -cacerts \
      -storepass changeit \
      | grep -E "Alias name.*jssl" -A 3
  fi
}

###################
# Part: install   #
###################
install_cert()
{
  if [[ "$_arg_alias" == "<host>" ]]; then
    _arg_alias="jssl_$_arg_host"
  fi

  debug "${BLUE}Installing cert for $JVM_VERSION${RESET}"
  debug "keytool: ${BLUE}$JAVA_HOME/bin/keytool${RESET}"

  echo | openssl s_client -connect "$_arg_host:$_arg_port" 2>/dev/null | openssl x509 > "$_arg_alias".pem
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    echo "${RED}✖ Failed to fetch certificate from $_arg_host:$_arg_port${RESET}"
    rm -f "$_arg_alias".pem
    exit 1
  fi

  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -import \
      -trustcacerts -noprompt \
      -alias "$_arg_alias" \
      -file "$_arg_alias".pem \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -keypass changeit -storepass changeit | debug
  else
    "$JAVA_HOME/bin/keytool" -importcert -cacerts -noprompt \
      -alias "$_arg_alias" \
      -file "$_arg_alias".pem \
      -keypass changeit -storepass changeit | debug
  fi

  # shellcheck disable=SC2181
  if [[ $? -eq 0 ]]; then
    echo "${GREEN}✔ Certificate installed successfully${RESET}"
  else
    echo "${RED}✖ Failed to install certificate into Java keystore${RESET}"
  fi

  rm -f "$_arg_alias".pem
}

run_batch_file() {
  local filename="$1"

  if [[ ! -f "$filename" ]]; then
    echo "${RED}✖ File not found: $filename${RESET}"
    exit 1
  fi

  while IFS= read -r line || [ -n "$line" ]; do
    host=$(echo "$line" | xargs)  # Trim whitespace
    if [[ -n "$host" ]]; then
      debug "${BLUE}--- Processing $host ---${RESET}"
      _arg_host="$host"
      install_cert
      check_handshake
      echo
    fi
  done < "$filename"
}

print_warning() {
    echo -e "\033[33m[WARNING]\033[0m $1"
}

get_real_javac_version() {
    "$1/bin/javac" --version 2>/dev/null | awk '{print $2}'
}

get_path_javac_version() {
    javac --version 2>/dev/null | awk '{print $2}'
}

check_java_home() {
    if [ -z "$JAVA_HOME" ]; then
        print_warning "JAVA_HOME is not set."

    else
      echo "JAVA_HOME: $JAVA_HOME"
    fi

    if [ -n "$JAVA_HOME" ]; then
        path_version=$(get_path_javac_version)
        home_version=$(get_real_javac_version "$JAVA_HOME")

        if [ "$path_version" != "$home_version" ]; then
            print_warning "javac version ($path_version) differs from JAVA_HOME/bin/javac version ($home_version)."
        fi
    fi
}

###################
# Part: uninstall #
###################
uninstall_cert()
{
  if [[ "$_arg_alias" == "<host>" ]]; then
    _arg_alias="$_arg_host"
  fi

  debug "${BLUE}Uninstalling certificate: jssl_$_arg_alias${RESET}"
  debug "keytool: ${BLUE}$JAVA_HOME/bin/keytool${RESET}"

  if [[ $JVM_VERSION == *"1.8"* ]]; then
    "$JAVA_HOME/bin/keytool" -delete \
      -noprompt -trustcacerts \
      -alias "jssl_$_arg_alias" \
      -keystore "$JAVA_HOME"/jre/lib/security/cacerts \
      -keypass changeit -storepass changeit \
      && echo "${GREEN}✔ Certificate removed from Java keystore${RESET}" \
      || echo "${RED}✖ Failed to remove certificate${RESET}"
  else
    "$JAVA_HOME/bin/keytool" -delete -noprompt -cacerts \
      -alias "jssl_$_arg_alias" \
      -keypass changeit -storepass changeit \
      && echo "${GREEN}✔ Certificate removed from Java keystore${RESET}" \
      || echo "${RED}✖ Failed to remove certificate${RESET}"
  fi
}

################################################
##################### Main #####################
################################################

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

if [ "$_arg_operation" == "ping" ]; then
  check_handshake
elif [ "$_arg_operation" == "install" ]; then
  install_cert
elif [ "$_arg_operation" == "uninstall" ]; then
  uninstall_cert
elif [ "$_arg_operation" == "list" ]; then
  list_installed_certs
elif [ "$_arg_operation" == "file" ]; then
  run_batch_file "$_arg_host"
elif [ "$_arg_operation" == "doctor" ]; then
  run_doctor
elif [ "$_arg_operation" == "version" ]; then
  print_version
else
  die "Unknown operation: $_arg_operation! Valid operations: ping, install, uninstall, list, file, version, doctor"
fi